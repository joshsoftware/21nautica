.row
  = simple_nested_form_for @import , html: {class: 'form-horizontal'}, defaults: {input_html: {class: 'form-control'}} do |f|
    .col-md-6
      = f.input :bl_number, label: 'BL- Number', input_html: {:"data-validation" => "required", :"data-validation-error-msg" => "This field is mandatory."}

      %div{data: {for: 'customerSelect'}}
        = render '/shared/customer', customers: @customers, model: 'import'


      = f.input :from, collection: PORTS.keys, input_html: {:"data-validation" => "required", :"data-validation-error-msg" => "This field is mandatory."}

      = f.input :to, collection: [], input_html: {:"data-validation" => "required", :"data-validation-error-msg" => "This field is mandatory."}

      = f.input :shipping_line_id, collection: get_shipping_line_vendors, as: :select, label: 'Shipping line', include_blank: false

      = f.input :estimate_arrival, as: :string, input_html: { class: 'form-control date', data: {behaviour: "datepicker"}}

      = f.input :equipment, collection: EQUIPMENT_TYPE, as: :select, label: 'Equipment', include_blank: false

      = f.input :quantity, input_html: {:"data-validation" => "number", :"data-validation-error-msg" => "Quantity Should be a valid Positive Number."}

      = f.input :description, label: 'Description', label: "#{@import.description}"
      = f.input :rate_agreed, input_html: {:"data-validation" => "required", :"data-validation-error-msg" => "This field is mandatory."}
      = f.input :weight, input_html: {:"data-validation" => "required", :"data-validation-error-msg" => "This field is mandatory."}
      .form-group
        .col-sm-offset-2.col-sm-2
          = f.submit 'Save', class: 'btn-primary', "data-disable-with" => "saving...."
    .col-md-6


      %div.scrollable-menu

        = f.fields_for :import_items, html: {class: 'number'} do |items_form|

          = items_form.input :container_number, label: "Container", input_html: {class: 'form-control'}

        = f.link_to_add "", :import_items




:coffeescript

  window.ports = #{PORTS.to_json}

  $('#import_quantity').on 'blur', (event) ->
    existing_count = $('.fields').size()
    quantity = this.value
    if quantity > existing_count
      i = 0
      while i < (quantity - existing_count)
        $('.add_nested_fields').click()
        i++
    else
      i = existing_count - 1
      while i >= quantity
        $('.fields')[i].remove()
        i--

  $('#new_import').on 'submit', (event) ->
    i = 0
    container_hash = {}
    if ($('.fields').size() == parseInt($('#import_quantity')[0].value))
      while i < $('.fields').size()
        container_hash[$('.fields input')[i].value] = i
        if( $('.fields input')[i].value == "" )
          alert('Please fill in all container numbers')
          event.preventDefault()
          return
        i++
    else
      alert('Container count not matching with quantity')
      event.preventDefault()
    if Object.keys(container_hash).length < $('.fields').size()
      alert('Duplicate container numbers!!')
      event.preventDefault()

  jQuery ($) ->

  $(document).on "nested:fieldRemoved", (event) ->
    if $('#import_quantity')[0].value != ""
      $('#import_quantity')[0].value = parseInt($('#import_quantity')[0].value) - 1
    return

  return

